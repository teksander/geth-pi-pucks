#!/bin/bash  
# Starts an experiment
#
# Options:
# --reset    or -r  : will reset everything blockchain related
# --start    or -s  : will start the experiment
# --startz   or -sz : will start with no visualization
# --logs     or -l  : will display monitor.log for all robots
# --python   or -p  : will display python console for all robots
# Example: 
# . starter -r -s -l -p

source ../globalconfig

echo "+-----------------------------------------------------------+"
echo "MAINFOLDER IS $MAIN_DIR"

echo "+-----------------------------------------------------------+"
echo "Pinging robots..."
./ping-all
wait

# Check responding robot count
NUM_RESP=$(wc -l < pi-pucks.txt)
if ((NUM_ROB != NUM_RESP)); then
	printf '%s\n' "Not enough robots are responding. STOP" >&2 
	exit 1         
fi

echo "+-----------------------------------------------------------+"
echo "Checking all robots..."
./check-all

echo "+-----------------------------------------------------------+"
echo "Resetting Geth..."
./reset-geth
wait

for opt in "$@"
do
if [[ $opt == "--reset" || $opt == "-r" ]]; then

	echo "+-----------------------------------------------------------+"
	echo "Resetting the Genesis Block..."
	./reset-genesis
	wait

	echo "+-----------------------------------------------------------+"
	echo "Resetting the Pi-Puck keys..."
	./reset-keys
	wait
fi
done

echo "+-----------------------------------------------------------+"
echo "Starting Experiment"

# # Open two TMUX sessions 
# tmux kill-session -t GETH >/dev/null 2>&1
# ./tmux-all
# tmux rename-session GETH

# tmux kill-session -t MAINLOOP >/dev/null 2>&1
# ./tmux-all
# tmux rename-session MAINLOOP

# # GETH TMUX session: Execute setup-geth (all robots)
# tmux send-keys -t GETH "cd $MAIN_DIR_ROBOTS" Enter "./setup-geth" Enter

# # MAINLOOP TMUX session: Execute mainloop.py with no option (good robots)
# # MAINLOOP TMUX session: Execute mainloop.py with option --byz (byzantine robots)
# BYZ_COUNT=0
# tmux set-option -w -t MAINLOOP synchronize-panes off
# # Randomely select byzantine robots:
# for PANE in $(shuf -i 0-$(($NUM_ROB-1))); do
# 	if [ $BYZ_COUNT -lt $NUM_BYZ ]; then
# 		tmux send-keys -t MAINLOOP:0.$PANE "cd $MAIN_DIR_ROBOTS/control/robots" Enter "python3 -i mainloop.py --byz"
# 		let BYZ_COUNT++
# 	else
# 		tmux send-keys -t MAINLOOP:0.$PANE "cd $MAIN_DIR_ROBOTS/control/robots" Enter "python3 -i mainloop.py"
# 	fi
# done
# tmux set-option -w -t MAINLOOP synchronize-panes on
# # sleep 3
# # tmux send-keys -t MAINLOOP:0.0 Enter

# python3 -i console-pc.py

# read -p "Press Enter when experiment is concluded"

# # Stop the Experiment
# tmux send-keys -t MAINLOOP:0.0 C-c
# sleep 0.5
# tmux send-keys -t MAINLOOP:0.0 C-d
# sleep 1
# tmux send-keys -t GETH:0.0 C-c
# sleep 1
# tmux kill-session -t GETH

# # Record log files
# while true; do

# 	echo "What is the experiment repetition number?"
# 	read REP_NUMBER

# 	LOG_FOLDER=experiment_$EXPERIMENT_NAME/${NUM_ROB}rob-${NUM_BYZ}byz-$REP_NUMBER

# 	echo "RECORD THE ROBOT LOGS TO: $LOG_FOLDER ? [Y/N]"
# 	read CONF
# 	if [ $CONF = "Y" -o $CONF = "y" ]; then
# 		break
# 	fi
# done

# ./collect-logs $LOG_FOLDER